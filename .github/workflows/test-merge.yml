# This is a basic workflow to help you get started with Actions

name: merge-model-changes-into-another-repo

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
 
  # Allows you to run this workflow manually from the Actions taba
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
#   # This workflow contains a single job called "build"
#   check:
#     name: Check files
#     outputs:
#       run_job: ${{ steps.check_files.outputs.run_job }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: 2 #fetches 2 commits

#       - name: check modified files
#         id: check_files
#         run: |
#           echo "=============== list modified files ==============="
#           git diff --name-only HEAD^ HEAD
          
#           echo "========== check paths of modified files =========="
#           git diff --name-only HEAD^ HEAD > files.txt
#           while IFS= read -r file
#           do
#             echo $file
#             if [[ $file != archives/* ]]; then
#               echo "This modified file is not under the 'archives' folder."
#               echo "::set-output name=run_job::false"
#               break
#             else
#               echo "::set-output name=run_job::true"
#             fi
#           done < files.txt
          
  sync_files:
    name: job to sync changes from 'archives' folder to cloud-regional
    #needs: check
    #if: needs.check.outputs.run_job == 'true'
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # number of commits to fetch, 0 = all history and tags for all branches, default = 1
          #ref: integration #specifies branch, tag or SHA, otherwise default branch

     #git pull origin device-model-sync-temp || true
#       - name: create orphan branch with modified files
#         run: |
#           git checkout --orphan device-model-sync-temp
          
#           git config --global user.name "DEV Archives_sync"
#           git config --global user.email "github_archives_sync@fenway.com"
#           git add --all
#           git commit -m "creating temporary orphan branch for cloud regional sync"
#           git push --set-upstream origin device-model-sync-temp
          
          
#     # Deploy to another repo
#       - name: Deploy
#         uses: s0/git-publish-subdir-action@develop
#         env:
#           REPO: git@github.com:jliwill/test-1.git
#           BRANCH: abc-temp
#           FOLDER: archives
#           SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
      
     # Checkout target repo 
      - name: Check out the target private repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: jliwill/test-1
          token: ${{ secrets.PAT }}
#           ref: abc-temp
      
          
      # modify file path to be same as main branch
      - name: attempt to fetch orphan branch from test-2
        run: |
           git fetch https://github.com/jliwill/test-2.git device-model-sync-temp:device-model-sync-temp
           
           
      - name: edit path and move files
        run: |
           git checkout device-model-sync-temp
           git config --global user.name "DEV Archives_sync"
           git config --global user.email "github_archives_sync@fenway.com"
           mkdir -p services/rules/lib/archives
           mv ./archives/*?_flat.json ./services/rules/lib/archives   
           find . -mindepth 1 -not -path '*/\.*' ! -regex '^./services\(/.*\)?$' -delete
           rm -rf ./.github ./.gitignore
           git add --all
           git commit -m "creating path and cleaning up unecessary files"
           git push --set-upstream origin device-model-sync-temp || true
           
#        rm * || true   

      - name: merge and delete temporary branch
        run: |
            git checkout main
            git merge --squash --allow-unrelated-histories -X theirs origin/device-model-sync-temp
            git commit -m "device-models-sync" || true
            git add .
            git push origin main 
            git push origin --delete device-model-sync-temp

        
      - name: Checkout device-model repo for cleanup
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 
      
      - name: delete temporary branch
        run: |
            git push origin --delete device-model-sync-temp
      
     

     
     
     
     
     
   
 
          
          
      
    
